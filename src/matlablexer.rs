// Generated from src/matlab.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_variables)]
use antlr_rust::atn::ATN;
use antlr_rust::char_stream::CharStream;
use antlr_rust::int_stream::IntStream;
use antlr_rust::lexer::{BaseLexer, Lexer, LexerRecog};
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::dfa::DFA;
use antlr_rust::lexer_atn_simulator::{LexerATNSimulator, ILexerATNSimulator};
use antlr_rust::PredictionContextCache;
use antlr_rust::recognizer::{Recognizer,Actions};
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::TokenSource;
use antlr_rust::token_factory::{TokenFactory,CommonTokenFactory,TokenAware};
use antlr_rust::token::*;
use antlr_rust::rule_context::{BaseRuleContext,EmptyCustomRuleContext,EmptyContext};
use antlr_rust::parser_rule_context::{ParserRuleContext,BaseParserRuleContext,cast};
use antlr_rust::vocabulary::{Vocabulary,VocabularyImpl};

use antlr_rust::{lazy_static,Tid,TidAble,TidExt};

use std::sync::Arc;
use std::cell::RefCell;
use std::rc::Rc;
use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};


	pub const T__0:isize=1; 
	pub const T__1:isize=2; 
	pub const T__2:isize=3; 
	pub const T__3:isize=4; 
	pub const T__4:isize=5; 
	pub const T__5:isize=6; 
	pub const T__6:isize=7; 
	pub const T__7:isize=8; 
	pub const T__8:isize=9; 
	pub const T__9:isize=10; 
	pub const T__10:isize=11; 
	pub const T__11:isize=12; 
	pub const T__12:isize=13; 
	pub const T__13:isize=14; 
	pub const T__14:isize=15; 
	pub const T__15:isize=16; 
	pub const T__16:isize=17; 
	pub const T__17:isize=18; 
	pub const T__18:isize=19; 
	pub const ARRAYMUL:isize=20; 
	pub const ARRAYDIV:isize=21; 
	pub const ARRAYRDIV:isize=22; 
	pub const ARRAYPOW:isize=23; 
	pub const BREAK:isize=24; 
	pub const RETURN:isize=25; 
	pub const FUNCTION:isize=26; 
	pub const FOR:isize=27; 
	pub const WHILE:isize=28; 
	pub const END:isize=29; 
	pub const GLOBAL:isize=30; 
	pub const IF:isize=31; 
	pub const CLEAR:isize=32; 
	pub const ELSE:isize=33; 
	pub const ELSEIF:isize=34; 
	pub const LE_OP:isize=35; 
	pub const GE_OP:isize=36; 
	pub const EQ_OP:isize=37; 
	pub const NE_OP:isize=38; 
	pub const TRANSPOSE:isize=39; 
	pub const NCTRANSPOSE:isize=40; 
	pub const STRING_LITERAL:isize=41; 
	pub const IDENTIFIER:isize=42; 
	pub const CONSTANT:isize=43; 
	pub const CR:isize=44; 
	pub const WS:isize=45;
	pub const channelNames: [&'static str;0+2] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	];

	pub const modeNames: [&'static str;1] = [
		"DEFAULT_MODE"
	];

	pub const ruleNames: [&'static str;48] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "ARRAYMUL", "ARRAYDIV", "ARRAYRDIV", "ARRAYPOW", "BREAK", 
		"RETURN", "FUNCTION", "FOR", "WHILE", "END", "GLOBAL", "IF", "CLEAR", 
		"ELSE", "ELSEIF", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "TRANSPOSE", "NCTRANSPOSE", 
		"STRING_LITERAL", "IDENTIFIER", "CONSTANT", "NUMBER", "E", "SIGN", "CR", 
		"WS"
	];


	pub const _LITERAL_NAMES: [Option<&'static str>;41] = [
		None, Some("'('"), Some("')'"), Some("'['"), Some("']'"), Some("':'"), 
		Some("','"), Some("'+'"), Some("'-'"), Some("'~'"), Some("'*'"), Some("'/'"), 
		Some("'\\'"), Some("'^'"), Some("'<'"), Some("'>'"), Some("'&'"), Some("'|'"), 
		Some("'='"), Some("';'"), Some("'.*'"), Some("'.\\'"), Some("'./'"), Some("'.^'"), 
		Some("'break'"), Some("'return'"), Some("'function'"), Some("'for'"), 
		Some("'while'"), Some("'end'"), Some("'global'"), Some("'if'"), Some("'clear'"), 
		Some("'else'"), Some("'elseif'"), Some("'<='"), Some("'>='"), Some("'=='"), 
		Some("'~='"), Some("'transpose'"), Some("'.''")
	];
	pub const _SYMBOLIC_NAMES: [Option<&'static str>;46]  = [
		None, None, None, None, None, None, None, None, None, None, None, None, 
		None, None, None, None, None, None, None, None, Some("ARRAYMUL"), Some("ARRAYDIV"), 
		Some("ARRAYRDIV"), Some("ARRAYPOW"), Some("BREAK"), Some("RETURN"), Some("FUNCTION"), 
		Some("FOR"), Some("WHILE"), Some("END"), Some("GLOBAL"), Some("IF"), Some("CLEAR"), 
		Some("ELSE"), Some("ELSEIF"), Some("LE_OP"), Some("GE_OP"), Some("EQ_OP"), 
		Some("NE_OP"), Some("TRANSPOSE"), Some("NCTRANSPOSE"), Some("STRING_LITERAL"), 
		Some("IDENTIFIER"), Some("CONSTANT"), Some("CR"), Some("WS")
	];
	lazy_static!{
	    static ref _shared_context_cache: Arc<PredictionContextCache> = Arc::new(PredictionContextCache::new());
		static ref VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(_LITERAL_NAMES.iter(), _SYMBOLIC_NAMES.iter(), None));
	}


pub type LexerContext<'input> = BaseRuleContext<'input,EmptyCustomRuleContext<'input,LocalTokenFactory<'input> >>;
pub type LocalTokenFactory<'input> = CommonTokenFactory;

type From<'a> = <LocalTokenFactory<'a> as TokenFactory<'a> >::From;

#[derive(Tid)]
pub struct matlabLexer<'input, Input:CharStream<From<'input> >> {
	base: BaseLexer<'input,matlabLexerActions,Input,LocalTokenFactory<'input>>,
}

impl<'input, Input:CharStream<From<'input> >> Deref for matlabLexer<'input,Input>{
	type Target = BaseLexer<'input,matlabLexerActions,Input,LocalTokenFactory<'input>>;

	fn deref(&self) -> &Self::Target {
		&self.base
	}
}

impl<'input, Input:CharStream<From<'input> >> DerefMut for matlabLexer<'input,Input>{
	fn deref_mut(&mut self) -> &mut Self::Target {
		&mut self.base
	}
}


impl<'input, Input:CharStream<From<'input> >> matlabLexer<'input,Input>{
    fn get_rule_names(&self) -> &'static [&'static str] {
        &ruleNames
    }
    fn get_literal_names(&self) -> &[Option<&str>] {
        &_LITERAL_NAMES
    }

    fn get_symbolic_names(&self) -> &[Option<&str>] {
        &_SYMBOLIC_NAMES
    }

    fn get_grammar_file_name(&self) -> &'static str {
        "matlabLexer.g4"
    }

	pub fn new_with_token_factory(input: Input, tf: &'input LocalTokenFactory<'input>) -> Self {
		antlr_rust::recognizer::check_version("0","2");
    	Self {
			base: BaseLexer::new_base_lexer(
				input,
				LexerATNSimulator::new_lexer_atnsimulator(
					_ATN.clone(),
					_decision_to_DFA.clone(),
					_shared_context_cache.clone(),
				),
				matlabLexerActions{},
				tf
			)
	    }
	}
}

impl<'input, Input:CharStream<From<'input> >> matlabLexer<'input,Input> where &'input LocalTokenFactory<'input>:Default{
	pub fn new(input: Input) -> Self{
		matlabLexer::new_with_token_factory(input, <&LocalTokenFactory<'input> as Default>::default())
	}
}

pub struct matlabLexerActions {
}

impl matlabLexerActions{
}

impl<'input, Input:CharStream<From<'input> >> Actions<'input,BaseLexer<'input,matlabLexerActions,Input,LocalTokenFactory<'input>>> for matlabLexerActions{
	}

	impl<'input, Input:CharStream<From<'input> >> matlabLexer<'input,Input>{

}

impl<'input, Input:CharStream<From<'input> >> LexerRecog<'input,BaseLexer<'input,matlabLexerActions,Input,LocalTokenFactory<'input>>> for matlabLexerActions{
}
impl<'input> TokenAware<'input> for matlabLexerActions{
	type TF = LocalTokenFactory<'input>;
}

impl<'input, Input:CharStream<From<'input> >> TokenSource<'input> for matlabLexer<'input,Input>{
	type TF = LocalTokenFactory<'input>;

    fn next_token(&mut self) -> <Self::TF as TokenFactory<'input>>::Tok {
        self.base.next_token()
    }

    fn get_line(&self) -> isize {
        self.base.get_line()
    }

    fn get_char_position_in_line(&self) -> isize {
        self.base.get_char_position_in_line()
    }

    fn get_input_stream(&mut self) -> Option<&mut dyn IntStream> {
        self.base.get_input_stream()
    }

	fn get_source_name(&self) -> String {
		self.base.get_source_name()
	}

    fn get_token_factory(&self) -> &'input Self::TF {
        self.base.get_token_factory()
    }
}



	lazy_static! {
	    static ref _ATN: Arc<ATN> =
	        Arc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
	    static ref _decision_to_DFA: Arc<Vec<antlr_rust::RwLock<DFA>>> = {
	        let mut dfa = Vec::new();
	        let size = _ATN.decision_to_state.len();
	        for i in 0..size {
	            dfa.push(DFA::new(
	                _ATN.clone(),
	                _ATN.get_decision_state(i),
	                i as isize,
	            ).into())
	        }
	        Arc::new(dfa)
	    };
	}



	const _serializedATN:&'static str =
		"\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x02\
		\x2f\u{126}\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\x04\x04\
		\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\x09\x09\
		\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\x0d\x04\
		\x0e\x09\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\x12\x09\
		\x12\x04\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\x16\x04\
		\x17\x09\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\x1b\x09\
		\x1b\x04\x1c\x09\x1c\x04\x1d\x09\x1d\x04\x1e\x09\x1e\x04\x1f\x09\x1f\x04\
		\x20\x09\x20\x04\x21\x09\x21\x04\x22\x09\x22\x04\x23\x09\x23\x04\x24\x09\
		\x24\x04\x25\x09\x25\x04\x26\x09\x26\x04\x27\x09\x27\x04\x28\x09\x28\x04\
		\x29\x09\x29\x04\x2a\x09\x2a\x04\x2b\x09\x2b\x04\x2c\x09\x2c\x04\x2d\x09\
		\x2d\x04\x2e\x09\x2e\x04\x2f\x09\x2f\x04\x30\x09\x30\x04\x31\x09\x31\x03\
		\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\
		\x06\x03\x07\x03\x07\x03\x08\x03\x08\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\
		\x0b\x03\x0b\x03\x0c\x03\x0c\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0f\x03\
		\x0f\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\
		\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\
		\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\
		\x19\x03\x19\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\
		\x1b\x03\x1b\x03\x1b\x03\x1b\x03\x1b\x03\x1b\x03\x1b\x03\x1b\x03\x1b\x03\
		\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\
		\x1d\x03\x1e\x03\x1e\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03\
		\x1f\x03\x1f\x03\x1f\x03\x20\x03\x20\x03\x20\x03\x21\x03\x21\x03\x21\x03\
		\x21\x03\x21\x03\x21\x03\x22\x03\x22\x03\x22\x03\x22\x03\x22\x03\x23\x03\
		\x23\x03\x23\x03\x23\x03\x23\x03\x23\x03\x23\x03\x24\x03\x24\x03\x24\x03\
		\x25\x03\x25\x03\x25\x03\x26\x03\x26\x03\x26\x03\x27\x03\x27\x03\x27\x03\
		\x28\x03\x28\x03\x28\x03\x28\x03\x28\x03\x28\x03\x28\x03\x28\x03\x28\x03\
		\x28\x03\x29\x03\x29\x03\x29\x03\x2a\x03\x2a\x03\x2a\x03\x2a\x07\x2a\u{f3}\
		\x0a\x2a\x0c\x2a\x0e\x2a\u{f6}\x0b\x2a\x03\x2a\x03\x2a\x03\x2b\x03\x2b\
		\x07\x2b\u{fc}\x0a\x2b\x0c\x2b\x0e\x2b\u{ff}\x0b\x2b\x03\x2c\x03\x2c\x03\
		\x2c\x05\x2c\u{104}\x0a\x2c\x03\x2c\x03\x2c\x05\x2c\u{108}\x0a\x2c\x03\
		\x2d\x06\x2d\u{10b}\x0a\x2d\x0d\x2d\x0e\x2d\u{10c}\x03\x2d\x03\x2d\x06\
		\x2d\u{111}\x0a\x2d\x0d\x2d\x0e\x2d\u{112}\x05\x2d\u{115}\x0a\x2d\x03\x2e\
		\x03\x2e\x03\x2f\x03\x2f\x03\x30\x06\x30\u{11c}\x0a\x30\x0d\x30\x0e\x30\
		\u{11d}\x03\x31\x06\x31\u{121}\x0a\x31\x0d\x31\x0e\x31\u{122}\x03\x31\x03\
		\x31\x02\x02\x32\x03\x03\x05\x04\x07\x05\x09\x06\x0b\x07\x0d\x08\x0f\x09\
		\x11\x0a\x13\x0b\x15\x0c\x17\x0d\x19\x0e\x1b\x0f\x1d\x10\x1f\x11\x21\x12\
		\x23\x13\x25\x14\x27\x15\x29\x16\x2b\x17\x2d\x18\x2f\x19\x31\x1a\x33\x1b\
		\x35\x1c\x37\x1d\x39\x1e\x3b\x1f\x3d\x20\x3f\x21\x41\x22\x43\x23\x45\x24\
		\x47\x25\x49\x26\x4b\x27\x4d\x28\x4f\x29\x51\x2a\x53\x2b\x55\x2c\x57\x2d\
		\x59\x02\x5b\x02\x5d\x02\x5f\x2e\x61\x2f\x03\x02\x09\x03\x02\x29\x29\x04\
		\x02\x43\x5c\x63\x7c\x06\x02\x32\x3b\x43\x5c\x61\x61\x63\x7c\x04\x02\x47\
		\x47\x67\x67\x04\x02\x2d\x2d\x2f\x2f\x04\x02\x0c\x0c\x0f\x0f\x04\x02\x0b\
		\x0b\x22\x22\x02\u{12c}\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\
		\x02\x07\x03\x02\x02\x02\x02\x09\x03\x02\x02\x02\x02\x0b\x03\x02\x02\x02\
		\x02\x0d\x03\x02\x02\x02\x02\x0f\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\
		\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\
		\x02\x19\x03\x02\x02\x02\x02\x1b\x03\x02\x02\x02\x02\x1d\x03\x02\x02\x02\
		\x02\x1f\x03\x02\x02\x02\x02\x21\x03\x02\x02\x02\x02\x23\x03\x02\x02\x02\
		\x02\x25\x03\x02\x02\x02\x02\x27\x03\x02\x02\x02\x02\x29\x03\x02\x02\x02\
		\x02\x2b\x03\x02\x02\x02\x02\x2d\x03\x02\x02\x02\x02\x2f\x03\x02\x02\x02\
		\x02\x31\x03\x02\x02\x02\x02\x33\x03\x02\x02\x02\x02\x35\x03\x02\x02\x02\
		\x02\x37\x03\x02\x02\x02\x02\x39\x03\x02\x02\x02\x02\x3b\x03\x02\x02\x02\
		\x02\x3d\x03\x02\x02\x02\x02\x3f\x03\x02\x02\x02\x02\x41\x03\x02\x02\x02\
		\x02\x43\x03\x02\x02\x02\x02\x45\x03\x02\x02\x02\x02\x47\x03\x02\x02\x02\
		\x02\x49\x03\x02\x02\x02\x02\x4b\x03\x02\x02\x02\x02\x4d\x03\x02\x02\x02\
		\x02\x4f\x03\x02\x02\x02\x02\x51\x03\x02\x02\x02\x02\x53\x03\x02\x02\x02\
		\x02\x55\x03\x02\x02\x02\x02\x57\x03\x02\x02\x02\x02\x5f\x03\x02\x02\x02\
		\x02\x61\x03\x02\x02\x02\x03\x63\x03\x02\x02\x02\x05\x65\x03\x02\x02\x02\
		\x07\x67\x03\x02\x02\x02\x09\x69\x03\x02\x02\x02\x0b\x6b\x03\x02\x02\x02\
		\x0d\x6d\x03\x02\x02\x02\x0f\x6f\x03\x02\x02\x02\x11\x71\x03\x02\x02\x02\
		\x13\x73\x03\x02\x02\x02\x15\x75\x03\x02\x02\x02\x17\x77\x03\x02\x02\x02\
		\x19\x79\x03\x02\x02\x02\x1b\x7b\x03\x02\x02\x02\x1d\x7d\x03\x02\x02\x02\
		\x1f\x7f\x03\x02\x02\x02\x21\u{81}\x03\x02\x02\x02\x23\u{83}\x03\x02\x02\
		\x02\x25\u{85}\x03\x02\x02\x02\x27\u{87}\x03\x02\x02\x02\x29\u{89}\x03\
		\x02\x02\x02\x2b\u{8c}\x03\x02\x02\x02\x2d\u{8f}\x03\x02\x02\x02\x2f\u{92}\
		\x03\x02\x02\x02\x31\u{95}\x03\x02\x02\x02\x33\u{9b}\x03\x02\x02\x02\x35\
		\u{a2}\x03\x02\x02\x02\x37\u{ab}\x03\x02\x02\x02\x39\u{af}\x03\x02\x02\
		\x02\x3b\u{b5}\x03\x02\x02\x02\x3d\u{b9}\x03\x02\x02\x02\x3f\u{c0}\x03\
		\x02\x02\x02\x41\u{c3}\x03\x02\x02\x02\x43\u{c9}\x03\x02\x02\x02\x45\u{ce}\
		\x03\x02\x02\x02\x47\u{d5}\x03\x02\x02\x02\x49\u{d8}\x03\x02\x02\x02\x4b\
		\u{db}\x03\x02\x02\x02\x4d\u{de}\x03\x02\x02\x02\x4f\u{e1}\x03\x02\x02\
		\x02\x51\u{eb}\x03\x02\x02\x02\x53\u{ee}\x03\x02\x02\x02\x55\u{f9}\x03\
		\x02\x02\x02\x57\u{100}\x03\x02\x02\x02\x59\u{10a}\x03\x02\x02\x02\x5b\
		\u{116}\x03\x02\x02\x02\x5d\u{118}\x03\x02\x02\x02\x5f\u{11b}\x03\x02\x02\
		\x02\x61\u{120}\x03\x02\x02\x02\x63\x64\x07\x2a\x02\x02\x64\x04\x03\x02\
		\x02\x02\x65\x66\x07\x2b\x02\x02\x66\x06\x03\x02\x02\x02\x67\x68\x07\x5d\
		\x02\x02\x68\x08\x03\x02\x02\x02\x69\x6a\x07\x5f\x02\x02\x6a\x0a\x03\x02\
		\x02\x02\x6b\x6c\x07\x3c\x02\x02\x6c\x0c\x03\x02\x02\x02\x6d\x6e\x07\x2e\
		\x02\x02\x6e\x0e\x03\x02\x02\x02\x6f\x70\x07\x2d\x02\x02\x70\x10\x03\x02\
		\x02\x02\x71\x72\x07\x2f\x02\x02\x72\x12\x03\x02\x02\x02\x73\x74\x07\u{80}\
		\x02\x02\x74\x14\x03\x02\x02\x02\x75\x76\x07\x2c\x02\x02\x76\x16\x03\x02\
		\x02\x02\x77\x78\x07\x31\x02\x02\x78\x18\x03\x02\x02\x02\x79\x7a\x07\x5e\
		\x02\x02\x7a\x1a\x03\x02\x02\x02\x7b\x7c\x07\x60\x02\x02\x7c\x1c\x03\x02\
		\x02\x02\x7d\x7e\x07\x3e\x02\x02\x7e\x1e\x03\x02\x02\x02\x7f\u{80}\x07\
		\x40\x02\x02\u{80}\x20\x03\x02\x02\x02\u{81}\u{82}\x07\x28\x02\x02\u{82}\
		\x22\x03\x02\x02\x02\u{83}\u{84}\x07\x7e\x02\x02\u{84}\x24\x03\x02\x02\
		\x02\u{85}\u{86}\x07\x3f\x02\x02\u{86}\x26\x03\x02\x02\x02\u{87}\u{88}\
		\x07\x3d\x02\x02\u{88}\x28\x03\x02\x02\x02\u{89}\u{8a}\x07\x30\x02\x02\
		\u{8a}\u{8b}\x07\x2c\x02\x02\u{8b}\x2a\x03\x02\x02\x02\u{8c}\u{8d}\x07\
		\x30\x02\x02\u{8d}\u{8e}\x07\x5e\x02\x02\u{8e}\x2c\x03\x02\x02\x02\u{8f}\
		\u{90}\x07\x30\x02\x02\u{90}\u{91}\x07\x31\x02\x02\u{91}\x2e\x03\x02\x02\
		\x02\u{92}\u{93}\x07\x30\x02\x02\u{93}\u{94}\x07\x60\x02\x02\u{94}\x30\
		\x03\x02\x02\x02\u{95}\u{96}\x07\x64\x02\x02\u{96}\u{97}\x07\x74\x02\x02\
		\u{97}\u{98}\x07\x67\x02\x02\u{98}\u{99}\x07\x63\x02\x02\u{99}\u{9a}\x07\
		\x6d\x02\x02\u{9a}\x32\x03\x02\x02\x02\u{9b}\u{9c}\x07\x74\x02\x02\u{9c}\
		\u{9d}\x07\x67\x02\x02\u{9d}\u{9e}\x07\x76\x02\x02\u{9e}\u{9f}\x07\x77\
		\x02\x02\u{9f}\u{a0}\x07\x74\x02\x02\u{a0}\u{a1}\x07\x70\x02\x02\u{a1}\
		\x34\x03\x02\x02\x02\u{a2}\u{a3}\x07\x68\x02\x02\u{a3}\u{a4}\x07\x77\x02\
		\x02\u{a4}\u{a5}\x07\x70\x02\x02\u{a5}\u{a6}\x07\x65\x02\x02\u{a6}\u{a7}\
		\x07\x76\x02\x02\u{a7}\u{a8}\x07\x6b\x02\x02\u{a8}\u{a9}\x07\x71\x02\x02\
		\u{a9}\u{aa}\x07\x70\x02\x02\u{aa}\x36\x03\x02\x02\x02\u{ab}\u{ac}\x07\
		\x68\x02\x02\u{ac}\u{ad}\x07\x71\x02\x02\u{ad}\u{ae}\x07\x74\x02\x02\u{ae}\
		\x38\x03\x02\x02\x02\u{af}\u{b0}\x07\x79\x02\x02\u{b0}\u{b1}\x07\x6a\x02\
		\x02\u{b1}\u{b2}\x07\x6b\x02\x02\u{b2}\u{b3}\x07\x6e\x02\x02\u{b3}\u{b4}\
		\x07\x67\x02\x02\u{b4}\x3a\x03\x02\x02\x02\u{b5}\u{b6}\x07\x67\x02\x02\
		\u{b6}\u{b7}\x07\x70\x02\x02\u{b7}\u{b8}\x07\x66\x02\x02\u{b8}\x3c\x03\
		\x02\x02\x02\u{b9}\u{ba}\x07\x69\x02\x02\u{ba}\u{bb}\x07\x6e\x02\x02\u{bb}\
		\u{bc}\x07\x71\x02\x02\u{bc}\u{bd}\x07\x64\x02\x02\u{bd}\u{be}\x07\x63\
		\x02\x02\u{be}\u{bf}\x07\x6e\x02\x02\u{bf}\x3e\x03\x02\x02\x02\u{c0}\u{c1}\
		\x07\x6b\x02\x02\u{c1}\u{c2}\x07\x68\x02\x02\u{c2}\x40\x03\x02\x02\x02\
		\u{c3}\u{c4}\x07\x65\x02\x02\u{c4}\u{c5}\x07\x6e\x02\x02\u{c5}\u{c6}\x07\
		\x67\x02\x02\u{c6}\u{c7}\x07\x63\x02\x02\u{c7}\u{c8}\x07\x74\x02\x02\u{c8}\
		\x42\x03\x02\x02\x02\u{c9}\u{ca}\x07\x67\x02\x02\u{ca}\u{cb}\x07\x6e\x02\
		\x02\u{cb}\u{cc}\x07\x75\x02\x02\u{cc}\u{cd}\x07\x67\x02\x02\u{cd}\x44\
		\x03\x02\x02\x02\u{ce}\u{cf}\x07\x67\x02\x02\u{cf}\u{d0}\x07\x6e\x02\x02\
		\u{d0}\u{d1}\x07\x75\x02\x02\u{d1}\u{d2}\x07\x67\x02\x02\u{d2}\u{d3}\x07\
		\x6b\x02\x02\u{d3}\u{d4}\x07\x68\x02\x02\u{d4}\x46\x03\x02\x02\x02\u{d5}\
		\u{d6}\x07\x3e\x02\x02\u{d6}\u{d7}\x07\x3f\x02\x02\u{d7}\x48\x03\x02\x02\
		\x02\u{d8}\u{d9}\x07\x40\x02\x02\u{d9}\u{da}\x07\x3f\x02\x02\u{da}\x4a\
		\x03\x02\x02\x02\u{db}\u{dc}\x07\x3f\x02\x02\u{dc}\u{dd}\x07\x3f\x02\x02\
		\u{dd}\x4c\x03\x02\x02\x02\u{de}\u{df}\x07\u{80}\x02\x02\u{df}\u{e0}\x07\
		\x3f\x02\x02\u{e0}\x4e\x03\x02\x02\x02\u{e1}\u{e2}\x07\x76\x02\x02\u{e2}\
		\u{e3}\x07\x74\x02\x02\u{e3}\u{e4}\x07\x63\x02\x02\u{e4}\u{e5}\x07\x70\
		\x02\x02\u{e5}\u{e6}\x07\x75\x02\x02\u{e6}\u{e7}\x07\x72\x02\x02\u{e7}\
		\u{e8}\x07\x71\x02\x02\u{e8}\u{e9}\x07\x75\x02\x02\u{e9}\u{ea}\x07\x67\
		\x02\x02\u{ea}\x50\x03\x02\x02\x02\u{eb}\u{ec}\x07\x30\x02\x02\u{ec}\u{ed}\
		\x07\x29\x02\x02\u{ed}\x52\x03\x02\x02\x02\u{ee}\u{f4}\x07\x29\x02\x02\
		\u{ef}\u{f3}\x0a\x02\x02\x02\u{f0}\u{f1}\x07\x29\x02\x02\u{f1}\u{f3}\x07\
		\x29\x02\x02\u{f2}\u{ef}\x03\x02\x02\x02\u{f2}\u{f0}\x03\x02\x02\x02\u{f3}\
		\u{f6}\x03\x02\x02\x02\u{f4}\u{f2}\x03\x02\x02\x02\u{f4}\u{f5}\x03\x02\
		\x02\x02\u{f5}\u{f7}\x03\x02\x02\x02\u{f6}\u{f4}\x03\x02\x02\x02\u{f7}\
		\u{f8}\x07\x29\x02\x02\u{f8}\x54\x03\x02\x02\x02\u{f9}\u{fd}\x09\x03\x02\
		\x02\u{fa}\u{fc}\x09\x04\x02\x02\u{fb}\u{fa}\x03\x02\x02\x02\u{fc}\u{ff}\
		\x03\x02\x02\x02\u{fd}\u{fb}\x03\x02\x02\x02\u{fd}\u{fe}\x03\x02\x02\x02\
		\u{fe}\x56\x03\x02\x02\x02\u{ff}\u{fd}\x03\x02\x02\x02\u{100}\u{107}\x05\
		\x59\x2d\x02\u{101}\u{103}\x05\x5b\x2e\x02\u{102}\u{104}\x05\x5d\x2f\x02\
		\u{103}\u{102}\x03\x02\x02\x02\u{103}\u{104}\x03\x02\x02\x02\u{104}\u{105}\
		\x03\x02\x02\x02\u{105}\u{106}\x05\x59\x2d\x02\u{106}\u{108}\x03\x02\x02\
		\x02\u{107}\u{101}\x03\x02\x02\x02\u{107}\u{108}\x03\x02\x02\x02\u{108}\
		\x58\x03\x02\x02\x02\u{109}\u{10b}\x04\x32\x3b\x02\u{10a}\u{109}\x03\x02\
		\x02\x02\u{10b}\u{10c}\x03\x02\x02\x02\u{10c}\u{10a}\x03\x02\x02\x02\u{10c}\
		\u{10d}\x03\x02\x02\x02\u{10d}\u{114}\x03\x02\x02\x02\u{10e}\u{110}\x07\
		\x30\x02\x02\u{10f}\u{111}\x04\x32\x3b\x02\u{110}\u{10f}\x03\x02\x02\x02\
		\u{111}\u{112}\x03\x02\x02\x02\u{112}\u{110}\x03\x02\x02\x02\u{112}\u{113}\
		\x03\x02\x02\x02\u{113}\u{115}\x03\x02\x02\x02\u{114}\u{10e}\x03\x02\x02\
		\x02\u{114}\u{115}\x03\x02\x02\x02\u{115}\x5a\x03\x02\x02\x02\u{116}\u{117}\
		\x09\x05\x02\x02\u{117}\x5c\x03\x02\x02\x02\u{118}\u{119}\x09\x06\x02\x02\
		\u{119}\x5e\x03\x02\x02\x02\u{11a}\u{11c}\x09\x07\x02\x02\u{11b}\u{11a}\
		\x03\x02\x02\x02\u{11c}\u{11d}\x03\x02\x02\x02\u{11d}\u{11b}\x03\x02\x02\
		\x02\u{11d}\u{11e}\x03\x02\x02\x02\u{11e}\x60\x03\x02\x02\x02\u{11f}\u{121}\
		\x09\x08\x02\x02\u{120}\u{11f}\x03\x02\x02\x02\u{121}\u{122}\x03\x02\x02\
		\x02\u{122}\u{120}\x03\x02\x02\x02\u{122}\u{123}\x03\x02\x02\x02\u{123}\
		\u{124}\x03\x02\x02\x02\u{124}\u{125}\x08\x31\x02\x02\u{125}\x62\x03\x02\
		\x02\x02\x0d\x02\u{f2}\u{f4}\u{fd}\u{103}\u{107}\u{10c}\u{112}\u{114}\u{11d}\
		\u{122}\x03\x08\x02\x02";
